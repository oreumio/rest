<?xml version="1.0" encoding="UTF-8"?>

<!--
  시스템 보안

  스프링 시큐러티를 활용해서 시스템 보안을 구현합니다.
-->

<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns:util="http://www.springframework.org/schema/util"
             xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.2.xsd
           http://www.springframework.org/schema/util
           http://www.springframework.org/schema/util/spring-util-3.2.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security.xsd">

    <http pattern="/file/**" security="none"/>

    <http entry-point-ref="authenticationEntryPoint">
        <intercept-url method="OPTIONS" pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <intercept-url pattern="/clients**" access="ROLE_SA"/>
        <intercept-url pattern="/clients/**" access="ROLE_SA"/>
        <intercept-url pattern="/client**" access="ROLE_CLIENT"/>
        <intercept-url pattern="/client/**" access="ROLE_CLIENT"/>
        <intercept-url pattern="/groups**" access="ROLE_CLIENT, ROLE_USER"/>
        <intercept-url pattern="/groups/**" access="ROLE_CLIENT, ROLE_USER"/>
        <intercept-url pattern="/group**" access="ROLE_GA"/>
        <intercept-url pattern="/group/**" access="ROLE_GA"/>
        <intercept-url pattern="/users**" access="ROLE_GA, ROLE_USER"/>
        <intercept-url pattern="/users/**" access="ROLE_GA, ROLE_USER"/>
        <intercept-url pattern="/user**" access="ROLE_USER"/>
        <intercept-url pattern="/user/**" access="ROLE_USER"/>
        <intercept-url pattern="/orgs**" access="ROLE_GA, ROLE_USER"/>
        <intercept-url pattern="/orgs/**" access="ROLE_GA, ROLE_USER"/>
        <intercept-url pattern="/**" access="ROLE_SA, ROLE_GA" />
<!--
        <custom-filter after="EXCEPTION_TRANSLATION_FILTER" ref="ajaxSessionTimeoutFilter"/>
-->
        <custom-filter position="BASIC_AUTH_FILTER" ref="myFilter" />


<!--
        <http-basic entry-point-ref="authenticationEntryPoint" />
-->

        <!-- logout 설정 -->
        <logout />

        <!-- 중복 로그인 차단 설정 -->
        <!-- remember-me 같은 비 UI 를 사용한 로그인의 경우 401 에러가 보내지지만, 에러페이지를 사용하고 싶다면, session-authentication-error-url 을 사용 -->
<!--
        <session-management session-fixation-protection="newSession" session-authentication-error-url="http://www.naver.com">
-->
            <!-- 첫번째 로그인을 해제하는 설정 -->
<!--
            <concurrency-control max-sessions="1" />
-->
            <!-- 두번째 로그인을 막는 설정. authentication-failure-url 로 보내진다. -->
<!--
            <concurrency-control max-sessions="1" error-if-maximum-exceeded="true" expired-url="/service/common/exception/expiredSession.do" />
        </session-management>
-->
    </http>

    <authentication-manager alias="authenticationManager">
        <authentication-provider>
            <user-service>
                <user name="sa@localhost:8083" password="letmein" authorities="ROLE_SA" />
            </user-service>
        </authentication-provider>

        <authentication-provider user-service-ref="clientUserDetailsService"/>

        <authentication-provider user-service-ref="groupUserDetailsService"/>

        <authentication-provider user-service-ref="myUserDetailsService"/>
<!--
        <authentication-provider user-service-ref="myUserDetailsService">
            <password-encoder ref="bcryptEncoder"/>
        </authentication-provider>
-->
    </authentication-manager>

<!--
    <beans:bean id="myap" class="com.oreumio.james.webmail.common.login.controller.MyAuthenticationProvider"/>
-->

    <!-- 고객 사용자 인증 처리 -->
    <beans:bean id="clientUserDetailsService" class="com.oreumio.james.rest.filter.ClientUserDetailsService"/>

    <!-- 그룹 관리자 인증 처리 -->
    <beans:bean id="groupUserDetailsService" class="com.oreumio.james.rest.filter.GroupUserDetailsService"/>

    <!-- 사용자 인증 처리 -->
    <beans:bean id="myUserDetailsService" class="com.oreumio.james.rest.filter.MyUserDetailsService"/>

    <beans:bean name="bcryptEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>


    <!-- spring security를 사용한 session timeout check 설정 -->
<!--
    <beans:bean id="ajaxSessionTimeoutFilter" class="com.oreumio.james.webmail.framework.filter.AjaxSessionTimeoutFilter" />
-->
    <beans:bean id="mySuccessHandler"
                class="com.oreumio.james.rest.session.MySavedRequestAwareAuthenticationSuccessHandler"/>
    <beans:bean id="myFailureHandler" class=
            "org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler"/>

    <beans:bean id="basicAuthenticationFilter"
          class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter">
        <beans:property name="authenticationManager" ref="authenticationManager"/>
        <beans:property name="authenticationEntryPoint" ref="authenticationEntryPoint"/>
    </beans:bean>

    <beans:bean id="authenticationEntryPoint"
          class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint">
        <beans:property name="realmName" value="Name Of Your Realm"/>
    </beans:bean>


    <beans:bean name="myFilter" class="com.oreumio.james.rest.filter.MyBasicAuthenticationFilter">
        <beans:constructor-arg index="0" ref="authenticationManager"/>
        <beans:constructor-arg index="1" ref="authenticationEntryPoint"/>
    </beans:bean>

</beans:beans>